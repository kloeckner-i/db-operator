name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  product_name: db-operator
  go_version: "1.18"
  go_os: linux
  go_arch: amd64
  main_go_path: .

jobs:
  lint: ## https://github.com/golangci/golangci-lint-action#how-to-use
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup GO
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}

      - name: Check Code Style
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.2 ## https://github.com/golangci/golangci-lint/releases
          args: --timeout 5m0s

  unit-test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}
      
      # The existing apparmor profile for mysql needs to be removed.
      # https://github.com/actions/virtual-environments/issues/181
      # https://github.com/moby/moby/issues/7512#issuecomment-51845976
      - name: Run the unit tests
        run: go test -tags tests -run "TestUnit"./... -v -cover

  gsql-test: 
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}

      - name: Start dependencies using docker-compose
        run: docker-compose -f ./resources/test/docker-compose-gsql.yml up -d
      
      - name: Run gsql tests
        run: go test -tags tests -run "TestGsql" ./... -v -cover

  database-mysql-test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        image:
          - mysql:5.7
          - mysql:8.0
          - mariadb:10.1
          - mariadb:10.2
          - mariadb:10.3
          - mariadb:10.4
          - mariadb:10.5
          - mariadb:10.6
          - mariadb:10.7
          - mariadb:10.8
          - mariadb:10.9
          - mariadb:10.10
          - mariadb:10.11
          - mariadb:11.0
          - mariadb:11.1            
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}
      
      # The existing apparmor profile for mysql needs to be removed.
      # https://github.com/actions/virtual-environments/issues/181
      # https://github.com/moby/moby/issues/7512#issuecomment-51845976
      - name: Remove MySQL App Armour Configuration
        run: |
          set -x
          sudo apt-get update
          sudo apt-get remove mysql-server --purge
          sudo apt-get install apparmor-profiles
          sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
      
      - name: Run the unit tests
        run: ./scripts/test_database mysql ${{ matrix.image }} ././resources/test/docker-compose-mysq-tmpl.yml

